[ NOTE ]: EWallet user login handler and journal record.

    [ NOTE   ]: Fetches all user records from database.
    [ INPUT  ]: active_session=<session>
    [ RETURN ]: (ResUser set | False)
    def fetch_all_user_records(self, active_session=None):

    [ NOTE   ]: Fetches the names for all existing user accounts.
    [ INPUT  ]: active_session=<session>
    [ RETURN ]: (User name set | False)
    def fetch_all_user_names(self, active_session=None):

    [ NOTE   ]: Fetches specified user account object by user name.
    [ INPUT  ]: user_name=<name>, active_session=<session>
    [ RETURN ]: (ResUser object | False)
    def fetch_user_by_name(self, user_name=None, active_session=None):

    [ NOTE   ]: Sets user account record id to EWallet Login Record.
    [ INPUT  ]: <user_id>
    [ RETURN ]: (True | False)
    def set_user_id(self, user_id):

    [ NOTE   ]: Sets user account login status to EWallet Login Record in the form of a boolean flag.
    [ INPUT  ]: (True | False)
    [ RETURN ]: (True | False)
    def set_login_status(self, login_status):

    [ NOTE   ]: Sets user login record data to EWallet Login Record.
    [ INPUT  ]: user_id=<id>, login_status=<status>
    [ RETURN ]: {'user_id': (True | False), 'login_status': (True | False)}
    def set_login_record_data(self, **kwargs):

    [ NOTE   ]: Uses the sha256 algorithm to hash password string.
    [ INPUT  ]: <password>
    [ RETURN ]: Password Hash
    def hash_password(self, password):

    [ NOTE   ]: Checks if a user name exists in database associated with a ResUser record.
    [ INPUT  ]: <user_name>, <active_session>
    [ RETURN ]: (ResUser object | False)
    def check_user_name_exists(self, user_name, active_session):

    [ NOTE   ]: Checks if user password and known sha256 hash match.
    [ INPUT  ]: <user_pass>, <know_hash>
    [ RETURN ]: (True | False)
    def check_user_pass_hash(self, user_pass, known_hash):

    [ NOTE   ]: Tries to authenticate user using given credentials so the EWallet session can be updated.
    [ INPUT  ]: user_name=<name>, user_pass=<pass>, active_session=<session>
    [ RETURN ]: (ResUser object | False)
    def authenticate_user(self, **kwargs):

    [ NOTE   ]: User action 'login', accessible from external api call.
    [ INPUT  ]: user_name=<name>, user_pass=<pass>, active_session=<session>
    [ RETURN ]: (ResUser object | False)
    def action_login(self, **kwargs):

    [ NOTE   ]: User action 'create new account', accessible from external api call.
    [ INPUT  ]: user_name=<name>, user_pas=<pass>, user_email=<email>, user_phone=<phone>, user_alias=<alias>, active_session=<session>
    [ RETURN ]: (ResUser object | False)
    def action_create_new_account(self, **kwargs):

    [ NOTE   ]: Jump table controller for EWallet login handler object.
    [ INPUT  ]: action=('login' | 'new_account')
    [ RETURN ]: Action variable correspondent.
    def ewallet_login_controller(self, **kwargs):

[ NOTE ]: EWallet user account creator.

    [ NOTE   ]: Fetches all ResUser objects recorded in database.
    [ INPUT  ]: active_session=<session>
    [ RETURN ]: (ResUser object set | False)
    def fetch_all_user_records(self, active_session=None):

    [ NOTE   ]: Fetches all user names recorded in database.
    [ INPUT  ]: active_session=<session>
    [ RETURN ]: (User name set | False)
    def fetch_all_user_names(self, active_session=None):

    [ NOTE   ]: Checks if given user name already exists in database records associated with a user account.
    [ INPUT  ]: <user_name>, <user_name_set>
    [ RETURN ]: (True | False)
    def check_user_name_ensure_one(self, user_name, user_names):

    [ NOTE   ]: Password check for corresponding EWallet password length standards.
    [ INPUT  ]: <user_pass>
    [ RETURN ]: (True | False)
    def check_user_pass_length(self, user_pass):

    [ NOTE   ]: Password check for corresponding EWallet letter standards.
    [ INPUT  ]: <user_pass>
    [ RETURN ]: (True | False)
    def check_user_pass_letters(self, user_pass):

    [ NOTE   ]: Password check for corresponding EWallet number standards.
    [ INPUT  ]: <user_pass>
    [ RETURN ]: (True | False)
    def check_user_pass_numbers(self, user_pass):

    [ NOTE   ]: Password check for corresponding EWallet symbol standards.
    [ INPUT  ]: <user_pass>
    [ RETURN ]: (True | False)
    def check_user_pass_symbols(self, user_pass):

    [ NOTE   ]: Checks if password structure corresponds with EWallet standards.
    [ INPUT  ]: <user_pass>
    [ RETURN ]: (True | False)
    def check_user_pass_characters(self, user_pass):

    [ NOTE   ]: System action 'check user password' verifying both length and structure, not accessible from external api call.
    [ INPUT  ]: <user_pass>
    [ RETURN ]: (True | False)
    def check_user_pass(self, user_pass):

    [ NOTE   ]: System action 'check user email' using jump table for security level jump table.
    [ INPUT  ]: <user_email>, severity=(1 | 2 | 3)
    [ RETURN ]: (True | False)
    def check_user_email(self, user_email, severity=None):

    [ NOTE   ]: Checks new users' name, password and email.
    [ INPUT  ]: user_name=<name>, user_pass=<pass>, user_email=<email>, active_session=<session>
    [ RETURN ]: {'user_name': (True | False), 'user_pass': (True | False), 'user_email': (True | False)}
    def perform_new_user_checks(self, **kwargs):

    [ NOTE   ]: Creates new user account and password hash record.
    [ INPUT  ]: active_session=<session, user_name=<name>, user_email=<email>, user_phone=<phone>, user_alias=<alias>
    [ RETURN ]: (ResUser object | False)
    def create_res_user(self, **kwargs):

    [ NOTE   ]: User action 'create new user', accessible from external api call.
    [ INPUT  ]: active_session=<session, user_name=<name>, user_email=<email>, user_phone=<phone>, user_alias=<alias>
    [ RETURN ]: (ResUser object | False)
    def action_create_new_user(self, **kwargs):

